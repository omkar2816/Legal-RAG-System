"""
Mock embedding client for testing when Voyage AI API is not available
"""
import numpy as np
import hashlib
from typing import List
import logging

logger = logging.getLogger(__name__)

class MockEmbeddingClient:
    """Mock client for generating embeddings using deterministic random vectors"""
    
    def __init__(self, dimension: int = 1024):
        self.dimension = dimension
    
    def get_embeddings(self, text_list: List[str], batch_size: int = None) -> List[List[float]]:
        """
        Generate mock embeddings for a list of texts
        
        Args:
            text_list: List of text strings to embed
            batch_size: Batch size for processing (ignored in mock)
        
        Returns:
            List of embedding vectors
        """
        all_embeddings = []
        
        for text in text_list:
            # Generate deterministic embedding based on text content
            embedding = self._generate_mock_embedding(text)
            all_embeddings.append(embedding)
            
        logger.info(f"Generated {len(all_embeddings)} mock embeddings")
        return all_embeddings
    
    def get_single_embedding(self, text: str) -> List[float]:
        """
        Generate mock embedding for a single text
        
        Args:
            text: Text string to embed
        
        Returns:
            Embedding vector
        """
        return self._generate_mock_embedding(text)
    
    def _generate_mock_embedding(self, text: str) -> List[float]:
        """
        Generate a deterministic mock embedding based on text content
        
        Args:
            text: Input text
        
        Returns:
            Mock embedding vector
        """
        # Create a hash of the text for deterministic results
        text_hash = hashlib.md5(text.encode()).hexdigest()
        
        # Use the hash to seed a random number generator
        seed = int(text_hash[:8], 16)
        np.random.seed(seed)
        
        # Generate a random vector and normalize it
        embedding = np.random.normal(0, 1, self.dimension)
        embedding = embedding / np.linalg.norm(embedding)
        
        return embedding.tolist()
    
    def get_embedding_dimension(self) -> int:
        """
        Get the dimension of embeddings generated by this model
        
        Returns:
            Embedding dimension
        """
        return self.dimension

# Global mock embedding client instance
mock_embedding_client = MockEmbeddingClient()

def get_mock_embeddings(text_list: List[str]) -> List[List[float]]:
    """
    Convenience function to get mock embeddings
    
    Args:
        text_list: List of text strings
    
    Returns:
        List of embedding vectors
    """
    return mock_embedding_client.get_embeddings(text_list) 